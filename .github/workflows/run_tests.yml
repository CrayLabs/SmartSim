name: run-tests

on:
  pull_request:
  push:
    branches:
      - develop

env:
  HOMEBREW_NO_ANALYTICS: "ON" # Make Homebrew installation a little quicker
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"
  DEBIAN_FRONTEND: "noninteractive" # Disable interactive apt install sessions

jobs:
  run_tests:
    name: Run tests with ${{ matrix.os }}, Python ${{ matrix.py_v}}, RedisAI ${{ matrix.rai }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-10.15, ubuntu-20.04] # Operating systems
        compiler: [8] # GNU compiler version
        rai: [1.2.3, 1.2.5, 1.2.7] # Redis AI versions
        py_v: [3.7, 3.8, 3.9] # Python versions
        exclude:
          - os: macos-10.15 # Do not build with Redis AI 1.2.5 on MacOS
            rai: 1.2.5
          - py_v: 3.7 # ONNX requires python >= 3.8
            rai: 1.2.7

    env:
      SMARTSIM_REDISAI: ${{ matrix.rai }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py_v }}

      - name: Install build-essentials for Ubuntu
        if: contains( matrix.os, 'ubuntu' )
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y wget

      - name: Install GNU make for MacOS and set GITHUB_PATH
        if: contains( matrix.os, 'macos' )
        run: |
          brew install make || true
          echo "$(brew --prefix)/opt/make/libexec/gnubin" >> $GITHUB_PATH

      - name: Build Singularity from source
        if: contains( matrix.os, 'ubuntu' ) && matrix.py_v == 3.9 && matrix.rai == '1.2.5'
        run: |
          sudo apt-get install -y libseccomp-dev pkg-config squashfs-tools cryptsetup curl git # wget build-essential
          echo 'export PATH=/usr/local/go/bin:$PATH' >> ~/.bashrc
          source ~/.bashrc
          export VERSION=1.0.0 # Apptainer (singularity) version
          wget https://github.com/apptainer/apptainer/releases/download/v${VERSION}/apptainer-${VERSION}.tar.gz
          tar -xzf apptainer-${VERSION}.tar.gz
          cd apptainer-${VERSION}
          ./mconfig
          make -C builddir
          sudo make -C builddir install

      - name: singularity pull test container # This lets us time how long the pull takes
        if: contains( matrix.os, 'ubuntu' ) && matrix.py_v == 3.9 && matrix.rai == '1.2.5'
        run: singularity pull docker://alrigazzi/smartsim-testing

      # Note: The develop branch of smartredis is installed first to ensure that any tests that depend
      # on developments of the client are brought in.
      - name: Install SmartSim (with ML backends)
        run: |
          python -m pip install git+https://github.com/CrayLabs/SmartRedis.git@develop#egg=smartredis
          python -m pip install .[dev,ml,ray]

      - name: Install ML Runtimes with Smart
        if: contains( matrix.os, 'macos' )
        run: smart build --device cpu -v

      - name: Install ML Runtimes with Smart (with pt, tf, and onnx support)
        if: contains( matrix.os, 'ubuntu' ) && (matrix.py_v != 3.9 || matrix.rai != '1.2.3')
        run: smart build --device cpu --onnx -v

      - name: Install ML Runtimes with Smart excluding PyTorch for Ubuntu/Python3.9/RAI1.2.3 combo
        if: contains( matrix.os, 'ubuntu' ) && matrix.py_v == 3.9 && matrix.rai == '1.2.3'
        run: smart build --device cpu --no_pt --onnx -v

      - name: Run Pytest
        run: |
          echo "SMARTSIM_LOG_LEVEL=debug" >> $GITHUB_ENV
          py.test -s --import-mode=importlib -o log_cli=true --cov=$(smart site) --cov-report=xml --cov-config=./tests/test_configs/cov/local_cov.cfg --ignore=tests/full_wlm/ ./tests/

      - name: Upload Pytest coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: ./coverage.xml
