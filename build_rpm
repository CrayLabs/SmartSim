#!/bin/bash

#
# Utility Functions
#

# Function to strip the major and minor version from the workflow Python package
# __init__.py file. In the poseidon-workflow repo, the workflow/__init__.py file should
# contain a __version__ special attribute of the form: __version__ = "0.4.0"
# In the above example, this would set RPM_VERSION_PREFIX to 0.4

function throw_error() {
  echo -e "ERROR: ${1}\nExiting..."
  exit 1
}

function get_init_version() {
  local __init_file="${SCRIPT_DIR}/smartsim/__init__.py"
  local __version
  if [[ -f ${__init_file} ]]; then
    # Grab the version, clean any single and double quotes, & slice out the major.minor version
    __version=$(grep '__version__' "${__init_file}" | awk -F '=' '{print $2}' | tr -d "\"'" | cut -d'.' -f-2 2>/dev/null)
    if [[ -n ${__version} ]]; then
      RPM_VERSION_PREFIX="${__version}"
    else
      throw_error "Could not determine workflow version from file: '${__init_file}'"
    fi
  else
    throw_error "Expected file does not exist: '${__init_file}'"
  fi
}


SCRIPT_DIR=$(dirname $(which $0))

#
# Find newest build_common.shrc
#

# for Jenkins builds - find the directory
COMMON_SUBDIR=multibranch-athena-build-common/branches/master/builds/lastSuccessfulBuild/archive/build
for d in \
  ../../jobs/$COMMON_SUBDIR \
  ../../../jobs/$COMMON_SUBDIR \
  ../../$COMMON_SUBDIR
  do
  if [ -f $SCRIPT_DIR/$d/build_common.shrc ] ; then
    cp --preserve=timestamps $SCRIPT_DIR/$d/build_common.shrc .
    break
  fi
done

if [ ! -f build_common.shrc ] ; then
  if [ -f build_common.shrc.bk ] ; then
    echo "Warning: cannot find build_common.shrc, using previous copy"
    mv build_common.shrc.bk build_common.shrc
  else
    echo "Error: cannot find build_common.shrc"
    exit 1
  fi
fi
source build_common.shrc

# The `get_init_version` function grabs the major and minor version from the
# workflow.__init__.py file, and uses it to set RPM_VERSION_PREFIX used by
# `set_rpm_version`
get_init_version

set_rpm_version

if [ -z "$URL" ] ; then
  URL=$PWD
fi

build_only=$1

if [ -z "$SOURCE_DIR" ] ; then
  SOURCE_DIR=$SCRIPT_DIR/build
fi

pkg=smartsim
if [[ -z "$build_only" || $build_only == $pkg ]] ; then
  rm -rf $pkg
  $SCRIPT_DIR/build_generic_rpm \
  -n $pkg \
  -v $RPM_VERSION \
  -r $RPM_BUILD_NUMBER \
  -s $SCRIPT_DIR/package/$pkg \
  SOURCE_DIR=$SCRIPT_DIR URL=$URL
fi
